#include <stdio.h>
#include <math.h>
#include <assert.h>
#include <string.h>
#include <stdlib.h>
#define MAX_FLIGHTS 1000

typedef struct 
{
	const char *code;
	const char *destination;
	int departure; 
} Flight;

typedef int(*Flight_cmp)(Flight, Flight);


Flight flight(const char *code, const char *destination, int departure)
{
	Flight result;
	result.code = code;
	result.destination = destination;
	result.departure = departure;
	return result;
}

void flights_exchange(Flight *a, int x, int y)
{
	Flight m = a[x];
	a[x] = a[y];
	a[y] = m;
}

char *str_dup(const char *s)			
{
	char *result = (char *) malloc(strlen(s) + 1);
	strcpy(result, s);
	return result;
}

void flights_isort_gen(Flight *a, int n, Flight_cmp cmp)
{
	for (int i = 1; i < n; i++)
	{
		int j = i;
		while (j > 0 && cmp(a[j-1], a[j]) > 0)
		{
			flights_exchange(a, j-1, j);
			j--;
		}
	}
}

void flights_write(FILE *f, Flight *a, int n)
{
	for (int i = 0; i < n; i++)
		fprintf(f, "[%d][%s][%s]\n", a[i].departure, a[i].code, a[i].destination);
}

int flight_cmp_by_destination_departure(Flight x, Flight y)
{
	int result = strcmp(x.destination, y.destination);
	if (result == 0)
		result = -(x.departure - y.departure);
	return result;
}

int flights_read(FILE *f, Flight *a)
{
  int result = 0;
  char code[16];
  char destination[64];
  int departure;
  while (fscanf(f, "%d%s%s", &departure, code, destination) != EOF)
  a[result++] =
  flight(str_dup(code), str_dup(destination), departure);
  return result;
}

void test_problem_B(char *filename)
{
	FILE *f = fopen(filename, "r");
	assert(f != NULL);
	Flight flights[MAX_FLIGHTS];
	int n_flights = flights_read(f, flights);
	flights_isort_gen(flights, n_flights, flight_cmp_by_destination_departure);
	flights_write(stdout, flights, n_flights);
}

int main(int argc, char **argv)
{
	test_problem_B(argv[1]);
	return 0;
}
